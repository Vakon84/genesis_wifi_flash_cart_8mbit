static const char* html_root =

"<!DOCTYPE html>\n"
"<html><head>\n"
"<style>\n"
"html, body {\n"
"font-family: Arial, Helvetica, sans-serif;\n"
"position: fixed;\n"
"top:0;\n"
"bottom: 0;\n"
"left: 0;\n"
"right: 0;\n"
"}\n"
"table, th, td {\n"
"border: 0px solid black;\n"
"border-collapse: collapse;\n"
"background-color: #333761;\n"
"}\n"
".title {\n"
"text-align: left;\n"
"font-family: Arial, Helvetica, sans-serif;\n"
"font-weight: bold;\n"
"font-size: 2em;\n"
"background-color: #525682;\n"
"box-shadow: 3px 3px #333761;\n"
"color: #ddee00;\n"
"padding:3px 6px\n"
"}\n"
".version {\n"
"float: right;\n"
"}\n"
".fileToUpload {\n"
"color: #ddee00;\n"
"font-weight: bold;\n"
"font-size: 1em;\n"
"}\n"
".uplButton {\n"
"font-weight: bold;\n"
"font-size: 1em;\n"
"}\n"
".upl {\n"
"font-size: 1em;\n"
"}\n"
"</style>\n"
"<meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-1\">\n"
"<title>Upload files to local server</title>\n"
"<script type=\"text/javascript\">\n"
"const ACTION_CHECK_STATUS = 100;\n"
"const STATE_IDLE = 0;\n"
"const STATE_MONITOR = 1;\n"
"var inAction = 0;\n"
"var state = STATE_IDLE;\n"
"var uploadRetry = 3;\n"
"var retryWrite = false;\n"
"function fileSelected() {\n"
"var table = '<br/><table style=\"width:80%\">';\n"
"var files = document.getElementById('fileToUpload').files;\n"
"if (files.length < 1) {\n"
"return;\n"
"}\n"
"var file = files[0];\n"
"var fileSize = 0;\n"
"fileSize = (Math.round(file.size * 100 / 1024) / 100).toString() + ' KB';\n"
"table += '<tr><td><b>Size<b></td><td>' + fileSize + '</td></tr>' +\n"
"'<tr><td><b><div id=\"progLabel\">Upload</div></b></td><td><progress id=\"prog0\" value=\"0\" max=\"100.0\"/></td></tr>';\n"
"table += '</table>';\n"
"document.getElementById('fileName').innerHTML = table;\n"
"if (file.name.endsWith(\".zip\")) {\n"
"document.getElementById('upl').innerHTML = '<br/>Error: file must be unzipped!';\n"
"} else {\n"
"document.getElementById('upl').innerHTML = '<br /> <input id=\"uplButton\" value=\"Upload\" type=\"submit\">';\n"
"}\n"
"}\n"
"function uploadFile() {\n"
"var files = document.getElementById('fileToUpload').files;\n"
"if (files.length < 1) {\n"
"return;\n"
"}\n"
"var file = files[0];\n"
"var xhr = new XMLHttpRequest();\n"
"xhr.upload.onprogress = (function(theFile) {\n"
"return function(e) {\n"
"uploadProgress( e, theFile );\n"
"};\n"
"})(0);\n"
"xhr.upload.onloadend = (function(theFile) {\n"
"return function(e) {\n"
"uploadComplete( e, theFile );\n"
"};\n"
"})(0);\n"
"/* xhr.addEventListener(\"load\", uploadComplete, false); */\n"
"xhr.addEventListener(\"error\", uploadFailed, false);\n"
"xhr.addEventListener(\"abort\", uploadCanceled, false);\n"
"xhr.open(\"POST\", \"rom.bin\");\n"
"xhr.send(file);\n"
"document.getElementById('fileToUpload').files = null;\n"
"}\n"
"function uploadProgress(evt, fileIndex) {\n"
"if (evt.lengthComputable) {\n"
"var percentComplete = Math.round(evt.loaded * 100 / evt.total);\n"
"document.getElementById('prog'+fileIndex).value = percentComplete;\n"
"}\n"
"else {\n"
"}\n"
"}\n"
"function uploadComplete(evt, fileIndex) {\n"
"document.getElementById('prog'+fileIndex).value = 100;\n"
"document.getElementById('upl').innerHTML = '<br/>Upload finished.';\n"
"state = STATE_MONITOR;\n"
"}\n"
"function uploadFailed(evt) {\n"
"document.getElementById('upl').innerHTML = '<br/>Upload failed.';\n"
"}\n"
"function uploadCanceled(evt) {\n"
"document.getElementById('upl').innerHTML = '<br/>Upload cancelled or connection dropped.';\n"
"}\n"
"function log(str) {\n"
"document.getElementById('log').innerHTML += str + \"<BR>\";\n"
"}\n"
"async function fetchWithTimeout(resource) {\n"
"const controller = new AbortController();\n"
"const id = setTimeout(() => controller.abort(), 1800);\n"
"const response = await fetch(resource, {method: \"GET\", signal: controller.signal});\n"
"clearTimeout(id);\n"
"return response;\n"
"}\n"
"window.postAction  = function(act) {\n"
"if (inAction != 0) {\n"
"} else\n"
"if (act == \"reload\") {\n"
"console.log(\"reload!\");\n"
"history.go(0);\n"
"} else {\n"
"var retData;\n"
"inAction = 1;\n"
"console.log(\"post action: \" + act);\n"
"fetchWithTimeout(\"status\")\n"
".then((response) => response.text())\n"
".then((text) => {retData = text;})\n"
".then(() => {\n"
"console.log(\" received: \"  + retData);\n"
"if (retData.startsWith(\"finishedOK\")) {\n"
"console.log(\"Finished\");\n"
"document.getElementById('prog0').value = 100;\n"
"document.getElementById('upl').innerHTML = '<br/>Flashing finished OK.' +\n"
"'<br/><b>Power cycle the console.</b>'\n"
"state = STATE_IDLE;\n"
"} else\n"
"if (retData.startsWith(\"E:\")) {\n"
"document.getElementById('progLabel').innerHTML = \"Erasing\";\n"
"document.getElementById('prog0').value = retData.substring(2);\n"
"} else\n"
"if (retData.startsWith(\"F:\")) {\n"
"document.getElementById('progLabel').innerHTML = \"Writing\";\n"
"document.getElementById('prog0').value = retData.substring(2);\n"
"if (retData == \"F:100\") document.getElementById('upl').innerHTML = '<br/>Flashing finished.';\n"
"} else\n"
"if (retData.startsWith(\"V:\")) {\n"
"document.getElementById('progLabel').innerHTML = \"Verification\";\n"
"document.getElementById('prog0').value = retData.substring(2);\n"
"if (retData == \"V:100\") document.getElementById('upl').innerHTML = '<br/>Verification finished.';\n"
"} else\n"
"if (retData.startsWith(\"X:Upload failed.\") && uploadRetry > 0) {\n"
"uploadRetry--;\n"
"document.getElementById('upl').innerHTML = '<br/>Retrying upload...';\n"
"uploadFile();\n"
"} else\n"
"if (retData.startsWith(\"X:Chip write failed.\")) {\n"
"document.getElementById('upl').innerHTML = '<br/>Error: Chip write failed. <br/>'  +\n"
"'<b>Press RESET button on the console and then click [Retry write].</b>' +\n"
"'<br /> <input value=\"Retry write\" type=\"submit\">';\n"
"console.log(\"Error: \" + retData.substring(2));\n"
"state = STATE_IDLE;\n"
"retryWrite = true;\n"
"} else\n"
"if (retData.startsWith(\"X:verify failed\")) {\n"
"document.getElementById('upl').innerHTML = '<br/>Error: Verify failed. <br/>'  +\n"
"'<b>Press RESET button on the console and then click [Retry write].</b>' +\n"
"'<br /> <input value=\"Retry write\" type=\"submit\">';\n"
"console.log(\"Error: \" + retData.substring(2));\n"
"state = STATE_IDLE;\n"
"retryWrite = true;\n"
"} else\n"
"if (retData.startsWith(\"X:\")) {\n"
"document.getElementById('upl').innerHTML = '<br/>Error: ' + retData.substring(2) +\n"
"'<br /> <input value=\"Retry\" type=\"submit\">';\n"
"console.log(\"Error: \" + retData.substring(2));\n"
"state = STATE_IDLE;\n"
"uploadRetry = 3;\n"
"} else {\n"
"document.getElementById('upl').innerHTML = '<br/>Unknown message received:' + retData ;\n"
"console.log(\"Unknown message: \" +  retData);\n"
"state = STATE_IDLE;\n"
"}\n"
"inAction = 0;\n"
"})\n"
".catch (error => {console.log(\" recv failed\"); inAction = 0;});\n"
"}\n"
"}\n"
"function autoLoop() {\n"
"if (state == STATE_MONITOR) {\n"
"console.log(\"Monitor Loop...\");\n"
"postAction(ACTION_CHECK_STATUS);\n"
"}\n"
"}\n"
"function submitRequest() {\n"
"console.log(\"Sumbit request\");\n"
"if (retryWrite) {\n"
"console.log(\"Retry write...\");\n"
"retryWrite = false;\n"
"fetchWithTimeout(\"retrywrite\")\n"
".then((response) => response.text())\n"
".then((text) => {retData = text;})\n"
".then(() => {\n"
"console.log(\" received: \"  + retData);\n"
"if (retData.startsWith(\"OK\")) {\n"
"state = STATE_MONITOR;\n"
"document.getElementById('upl').innerHTML = '<br/>Writing in progress...';\n"
"} else {\n"
"state = STATE_IDLE;\n"
"document.getElementById('upl').innerHTML = '<br/>' + retData ;\n"
"}\n"
"})\n"
".catch (error => {console.log(\"recv failed\"); inAction = 0;});\n"
"} else {\n"
"console.log(\"Upload file...\");\n"
"uploadFile();\n"
"}\n"
"}\n"
"function init() {\n"
"console.log(\"init called\");\n"
"inAction = 0;\n"
"state = STATE_IDLE;\n"
"history.pushState(null, document.title, location.href);\n"
"setInterval(autoLoop, 1000);\n"
"}\n"
"</script>\n"
"</head>\n"
"<body onload=\"init()\" text=\"#BABABA\" bgcolor=\"#3c406d\" >\n"
"<div class=\"title\">Genesis WiFi Cart</div>\n"
"<div class=\"version\">ver. X.YZ</div>\n"
"<form id=\"form1\" onsubmit=\"submitRequest(); return false\">\n"
"<div>\n"
"<p>\n"
"<label for=\"fileToUpload\">Select file to upload:</label>\n"
"<p>\n"
"<input name=\"fileToUpload[]\" id=\"fileToUpload\" onchange=\"fileSelected();\" type=\"file\" required >\n"
"</div>\n"
"<div id=\"fileName\">\n"
"</div>\n"
"<div id=\"upl\">\n"
"</div>\n"
"</form>\n"
"<div id=\"log\">\n"
"</div>\n"
"</body></html>\n"


;
